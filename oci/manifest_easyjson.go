// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package oci

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	go_digest "github.com/opencontainers/go-digest"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson4ef6ea8bDecodeGithubComRicardobranco777RegviewOci(in *jlexer.Lexer, out *Manifest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mediaType":
			out.MediaType = string(in.String())
		case "config":
			easyjson4ef6ea8bDecodeGithubComRicardobranco777RegviewOci1(in, &out.Config)
		case "layers":
			if in.IsNull() {
				in.Skip()
				out.Layers = nil
			} else {
				in.Delim('[')
				if out.Layers == nil {
					if !in.IsDelim(']') {
						out.Layers = make([]Descriptor, 0, 0)
					} else {
						out.Layers = []Descriptor{}
					}
				} else {
					out.Layers = (out.Layers)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Descriptor
					easyjson4ef6ea8bDecodeGithubComRicardobranco777RegviewOci1(in, &v1)
					out.Layers = append(out.Layers, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "annotations":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Annotations = make(map[string]string)
				} else {
					out.Annotations = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 string
					v2 = string(in.String())
					(out.Annotations)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		case "schemaVersion":
			out.SchemaVersion = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4ef6ea8bEncodeGithubComRicardobranco777RegviewOci(out *jwriter.Writer, in Manifest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MediaType != "" {
		const prefix string = ",\"mediaType\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.MediaType))
	}
	{
		const prefix string = ",\"config\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson4ef6ea8bEncodeGithubComRicardobranco777RegviewOci1(out, in.Config)
	}
	{
		const prefix string = ",\"layers\":"
		out.RawString(prefix)
		if in.Layers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Layers {
				if v3 > 0 {
					out.RawByte(',')
				}
				easyjson4ef6ea8bEncodeGithubComRicardobranco777RegviewOci1(out, v4)
			}
			out.RawByte(']')
		}
	}
	if len(in.Annotations) != 0 {
		const prefix string = ",\"annotations\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v5First := true
			for v5Name, v5Value := range in.Annotations {
				if v5First {
					v5First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v5Name))
				out.RawByte(':')
				out.String(string(v5Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"schemaVersion\":"
		out.RawString(prefix)
		out.Int(int(in.SchemaVersion))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Manifest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4ef6ea8bEncodeGithubComRicardobranco777RegviewOci(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Manifest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4ef6ea8bEncodeGithubComRicardobranco777RegviewOci(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Manifest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4ef6ea8bDecodeGithubComRicardobranco777RegviewOci(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Manifest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4ef6ea8bDecodeGithubComRicardobranco777RegviewOci(l, v)
}
func easyjson4ef6ea8bDecodeGithubComRicardobranco777RegviewOci1(in *jlexer.Lexer, out *Descriptor) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mediaType":
			out.MediaType = string(in.String())
		case "digest":
			out.Digest = go_digest.Digest(in.String())
		case "size":
			out.Size = int64(in.Int64())
		case "urls":
			if in.IsNull() {
				in.Skip()
				out.URLs = nil
			} else {
				in.Delim('[')
				if out.URLs == nil {
					if !in.IsDelim(']') {
						out.URLs = make([]string, 0, 4)
					} else {
						out.URLs = []string{}
					}
				} else {
					out.URLs = (out.URLs)[:0]
				}
				for !in.IsDelim(']') {
					var v6 string
					v6 = string(in.String())
					out.URLs = append(out.URLs, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "annotations":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Annotations = make(map[string]string)
				} else {
					out.Annotations = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v7 string
					v7 = string(in.String())
					(out.Annotations)[key] = v7
					in.WantComma()
				}
				in.Delim('}')
			}
		case "platform":
			if in.IsNull() {
				in.Skip()
				out.Platform = nil
			} else {
				if out.Platform == nil {
					out.Platform = new(Platform)
				}
				easyjson4ef6ea8bDecodeGithubComRicardobranco777RegviewOci2(in, out.Platform)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4ef6ea8bEncodeGithubComRicardobranco777RegviewOci1(out *jwriter.Writer, in Descriptor) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MediaType != "" {
		const prefix string = ",\"mediaType\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.MediaType))
	}
	{
		const prefix string = ",\"digest\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Digest))
	}
	{
		const prefix string = ",\"size\":"
		out.RawString(prefix)
		out.Int64(int64(in.Size))
	}
	if len(in.URLs) != 0 {
		const prefix string = ",\"urls\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v8, v9 := range in.URLs {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	if len(in.Annotations) != 0 {
		const prefix string = ",\"annotations\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v10First := true
			for v10Name, v10Value := range in.Annotations {
				if v10First {
					v10First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v10Name))
				out.RawByte(':')
				out.String(string(v10Value))
			}
			out.RawByte('}')
		}
	}
	if in.Platform != nil {
		const prefix string = ",\"platform\":"
		out.RawString(prefix)
		easyjson4ef6ea8bEncodeGithubComRicardobranco777RegviewOci2(out, *in.Platform)
	}
	out.RawByte('}')
}
func easyjson4ef6ea8bDecodeGithubComRicardobranco777RegviewOci2(in *jlexer.Lexer, out *Platform) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "architecture":
			out.Architecture = string(in.String())
		case "os":
			out.OS = string(in.String())
		case "os.version":
			out.OSVersion = string(in.String())
		case "os.features":
			if in.IsNull() {
				in.Skip()
				out.OSFeatures = nil
			} else {
				in.Delim('[')
				if out.OSFeatures == nil {
					if !in.IsDelim(']') {
						out.OSFeatures = make([]string, 0, 4)
					} else {
						out.OSFeatures = []string{}
					}
				} else {
					out.OSFeatures = (out.OSFeatures)[:0]
				}
				for !in.IsDelim(']') {
					var v11 string
					v11 = string(in.String())
					out.OSFeatures = append(out.OSFeatures, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "variant":
			out.Variant = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4ef6ea8bEncodeGithubComRicardobranco777RegviewOci2(out *jwriter.Writer, in Platform) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"architecture\":"
		out.RawString(prefix[1:])
		out.String(string(in.Architecture))
	}
	{
		const prefix string = ",\"os\":"
		out.RawString(prefix)
		out.String(string(in.OS))
	}
	if in.OSVersion != "" {
		const prefix string = ",\"os.version\":"
		out.RawString(prefix)
		out.String(string(in.OSVersion))
	}
	if len(in.OSFeatures) != 0 {
		const prefix string = ",\"os.features\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v12, v13 := range in.OSFeatures {
				if v12 > 0 {
					out.RawByte(',')
				}
				out.String(string(v13))
			}
			out.RawByte(']')
		}
	}
	if in.Variant != "" {
		const prefix string = ",\"variant\":"
		out.RawString(prefix)
		out.String(string(in.Variant))
	}
	out.RawByte('}')
}
