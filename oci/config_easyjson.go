// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package oci

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6615c02eDecodeGithubComRicardobranco777RegviewOci(in *jlexer.Lexer, out *Image) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "created":
			if in.IsNull() {
				in.Skip()
				out.Created = nil
			} else {
				if out.Created == nil {
					out.Created = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Created).UnmarshalJSON(data))
				}
			}
		case "author":
			out.Author = string(in.String())
		case "architecture":
			out.Architecture = string(in.String())
		case "os":
			out.OS = string(in.String())
		case "config":
			easyjson6615c02eDecodeGithubComRicardobranco777RegviewOci1(in, &out.Config)
		case "history":
			if in.IsNull() {
				in.Skip()
				out.History = nil
			} else {
				in.Delim('[')
				if out.History == nil {
					if !in.IsDelim(']') {
						out.History = make([]History, 0, 1)
					} else {
						out.History = []History{}
					}
				} else {
					out.History = (out.History)[:0]
				}
				for !in.IsDelim(']') {
					var v1 History
					easyjson6615c02eDecodeGithubComRicardobranco777RegviewOci2(in, &v1)
					out.History = append(out.History, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComRicardobranco777RegviewOci(out *jwriter.Writer, in Image) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Created != nil {
		const prefix string = ",\"created\":"
		first = false
		out.RawString(prefix[1:])
		out.Raw((*in.Created).MarshalJSON())
	}
	if in.Author != "" {
		const prefix string = ",\"author\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Author))
	}
	{
		const prefix string = ",\"architecture\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Architecture))
	}
	{
		const prefix string = ",\"os\":"
		out.RawString(prefix)
		out.String(string(in.OS))
	}
	if true {
		const prefix string = ",\"config\":"
		out.RawString(prefix)
		easyjson6615c02eEncodeGithubComRicardobranco777RegviewOci1(out, in.Config)
	}
	if len(in.History) != 0 {
		const prefix string = ",\"history\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v2, v3 := range in.History {
				if v2 > 0 {
					out.RawByte(',')
				}
				easyjson6615c02eEncodeGithubComRicardobranco777RegviewOci2(out, v3)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Image) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComRicardobranco777RegviewOci(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Image) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComRicardobranco777RegviewOci(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Image) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComRicardobranco777RegviewOci(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Image) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComRicardobranco777RegviewOci(l, v)
}
func easyjson6615c02eDecodeGithubComRicardobranco777RegviewOci2(in *jlexer.Lexer, out *History) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "created":
			if in.IsNull() {
				in.Skip()
				out.Created = nil
			} else {
				if out.Created == nil {
					out.Created = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Created).UnmarshalJSON(data))
				}
			}
		case "created_by":
			out.CreatedBy = string(in.String())
		case "author":
			out.Author = string(in.String())
		case "comment":
			out.Comment = string(in.String())
		case "empty_layer":
			out.EmptyLayer = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComRicardobranco777RegviewOci2(out *jwriter.Writer, in History) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Created != nil {
		const prefix string = ",\"created\":"
		first = false
		out.RawString(prefix[1:])
		out.Raw((*in.Created).MarshalJSON())
	}
	if in.CreatedBy != "" {
		const prefix string = ",\"created_by\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CreatedBy))
	}
	if in.Author != "" {
		const prefix string = ",\"author\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Author))
	}
	if in.Comment != "" {
		const prefix string = ",\"comment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Comment))
	}
	if in.EmptyLayer {
		const prefix string = ",\"empty_layer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.EmptyLayer))
	}
	out.RawByte('}')
}
func easyjson6615c02eDecodeGithubComRicardobranco777RegviewOci1(in *jlexer.Lexer, out *ImageConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "User":
			out.User = string(in.String())
		case "ExposedPorts":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ExposedPorts = make(map[string]struct{})
				} else {
					out.ExposedPorts = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v4 struct{}
					easyjson6615c02eDecode(in, &v4)
					(out.ExposedPorts)[key] = v4
					in.WantComma()
				}
				in.Delim('}')
			}
		case "Env":
			if in.IsNull() {
				in.Skip()
				out.Env = nil
			} else {
				in.Delim('[')
				if out.Env == nil {
					if !in.IsDelim(']') {
						out.Env = make([]string, 0, 4)
					} else {
						out.Env = []string{}
					}
				} else {
					out.Env = (out.Env)[:0]
				}
				for !in.IsDelim(']') {
					var v5 string
					v5 = string(in.String())
					out.Env = append(out.Env, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Entrypoint":
			if in.IsNull() {
				in.Skip()
				out.Entrypoint = nil
			} else {
				in.Delim('[')
				if out.Entrypoint == nil {
					if !in.IsDelim(']') {
						out.Entrypoint = make([]string, 0, 4)
					} else {
						out.Entrypoint = []string{}
					}
				} else {
					out.Entrypoint = (out.Entrypoint)[:0]
				}
				for !in.IsDelim(']') {
					var v6 string
					v6 = string(in.String())
					out.Entrypoint = append(out.Entrypoint, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Cmd":
			if in.IsNull() {
				in.Skip()
				out.Cmd = nil
			} else {
				in.Delim('[')
				if out.Cmd == nil {
					if !in.IsDelim(']') {
						out.Cmd = make([]string, 0, 4)
					} else {
						out.Cmd = []string{}
					}
				} else {
					out.Cmd = (out.Cmd)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.Cmd = append(out.Cmd, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Volumes":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Volumes = make(map[string]struct{})
				} else {
					out.Volumes = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v8 struct{}
					easyjson6615c02eDecode(in, &v8)
					(out.Volumes)[key] = v8
					in.WantComma()
				}
				in.Delim('}')
			}
		case "WorkingDir":
			out.WorkingDir = string(in.String())
		case "Labels":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Labels = make(map[string]string)
				} else {
					out.Labels = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v9 string
					v9 = string(in.String())
					(out.Labels)[key] = v9
					in.WantComma()
				}
				in.Delim('}')
			}
		case "StopSignal":
			out.StopSignal = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComRicardobranco777RegviewOci1(out *jwriter.Writer, in ImageConfig) {
	out.RawByte('{')
	first := true
	_ = first
	if in.User != "" {
		const prefix string = ",\"User\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.User))
	}
	if len(in.ExposedPorts) != 0 {
		const prefix string = ",\"ExposedPorts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v10First := true
			for v10Name, v10Value := range in.ExposedPorts {
				if v10First {
					v10First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v10Name))
				out.RawByte(':')
				easyjson6615c02eEncode(out, v10Value)
			}
			out.RawByte('}')
		}
	}
	if len(in.Env) != 0 {
		const prefix string = ",\"Env\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v11, v12 := range in.Env {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.String(string(v12))
			}
			out.RawByte(']')
		}
	}
	if len(in.Entrypoint) != 0 {
		const prefix string = ",\"Entrypoint\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v13, v14 := range in.Entrypoint {
				if v13 > 0 {
					out.RawByte(',')
				}
				out.String(string(v14))
			}
			out.RawByte(']')
		}
	}
	if len(in.Cmd) != 0 {
		const prefix string = ",\"Cmd\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v15, v16 := range in.Cmd {
				if v15 > 0 {
					out.RawByte(',')
				}
				out.String(string(v16))
			}
			out.RawByte(']')
		}
	}
	if len(in.Volumes) != 0 {
		const prefix string = ",\"Volumes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v17First := true
			for v17Name, v17Value := range in.Volumes {
				if v17First {
					v17First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v17Name))
				out.RawByte(':')
				easyjson6615c02eEncode(out, v17Value)
			}
			out.RawByte('}')
		}
	}
	if in.WorkingDir != "" {
		const prefix string = ",\"WorkingDir\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.WorkingDir))
	}
	if len(in.Labels) != 0 {
		const prefix string = ",\"Labels\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v18First := true
			for v18Name, v18Value := range in.Labels {
				if v18First {
					v18First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v18Name))
				out.RawByte(':')
				out.String(string(v18Value))
			}
			out.RawByte('}')
		}
	}
	if in.StopSignal != "" {
		const prefix string = ",\"StopSignal\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StopSignal))
	}
	out.RawByte('}')
}
func easyjson6615c02eDecode(in *jlexer.Lexer, out *struct{}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncode(out *jwriter.Writer, in struct{}) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}
